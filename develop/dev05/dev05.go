// 5.	Разработать программу, которая будет последовательно отправлять значения в канал, а с другой стороны канала — читать. По истечению N секунд программа должна завершаться.

package main

import (
	"context"
	"fmt"
	"math/rand"
	"time"
)

func main() {

	// задаем время по истечении которого завершится программа
	n := 5 * time.Second

	// создаем канал для данных
	dataCh := make(chan int)

	// создаем новый контекст
	ctx, cancel := context.WithDeadline(context.Background(), time.Now().Add(n))
	// откладываем запуск функции отмены контекста
	defer cancel()

	// запускаем горутину и передаем контекст
	go func(ctx context.Context) {
		// в бесконечном цикле
		for {
			// в операторе
			select {
			// пишем в канал рандомное значение
			case dataCh <- rand.Intn(1000000):
				// ждем секунду
				time.Sleep(time.Second)
			// если через канал пришло зачение то это значит что контекст был завершен
			case <-ctx.Done():
				// выводим сообщение содержащееся в переменной ошибки контекста
				fmt.Println(ctx.Err())
				// закрываем канал данных
				close(dataCh)
				// завершаем бесконечный цикл и горутину
				return
			}
		}
	}(ctx)

	// бесконечно вычитываем данные из канала пока он не закроется
	for d := range dataCh {
		// выводим значение полученное через канал
		fmt.Println("Received value:", d)
	}
}
