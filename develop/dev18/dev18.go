// 18.	Реализовать структуру-счетчик, которая будет инкрементироваться в конкурентной среде. По завершению программа должна выводить итоговое значение счетчика.

package main

import (
	"fmt"
	"sync"
	"sync/atomic"
)

// определаем структуру
type Counter struct {
	value int64
}

// определяем у структуры метод
func (c *Counter) Increment() {
	// так как раньше уже были примеры на Мьютексы, подразумевается что тут атомики
	atomic.AddInt64(&c.value, 1)
}

// определяем у структуры метод
func (c *Counter) ReadCount() int64 {
	return c.value
}

func main() {

	// инициализируем новый счетчик
	co := new(Counter)

	// делаем группу ожидания для запуска конкурентных подпрограмм
	var wg sync.WaitGroup

	// запускаем конкурентные подпрограммы в цикле
	for i := 0; i < 50; i++ {
		wg.Add(1)

		go func() {
			// каждая подпрограмма инкрементирует значение счетчика по 1000 раз
			for c := 0; c < 1000; c++ {
				co.Increment()
			}
			// завершаем подпрограмму и даем знать это группе ожидания
			wg.Done()
		}()
	}

	// ждем завершения всех подпрограмм
	wg.Wait()

	// отображаем результат
	fmt.Println(co.ReadCount())
}
